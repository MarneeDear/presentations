def factorial_imperative(n):
    """Compute n! where n is an integer >= 0."""
    if n `isinstance` int and n >= 0:
        acc = 1
        for x in range(1, n+1):
            acc *= x
        return acc
    else:
        raise TypeError("the argument to factorial must be an integer >= 0")

def factorial_recursive(n):
    """Compute n! where n is an integer >= 0."""
    case n:
        match 0:
            return 1
        match _ is int if n > 0:
            return n * factorial_recursive(n-1)
    else:
        raise TypeError("the argument to factorial must be an integer >= 0")

def factorial_iterative(n):
    """Compute n! where n is an integer >= 0."""
    case n:
        match 0:
            return 1
        match _ is int if n > 0:
            return range(1, n+1) |> reduce$(*)
    else:
        raise TypeError("the argument to factorial must be an integer >= 0")

def factorial_addpattern(0) = 1
@addpattern(factorial_addpattern)
def factorial_addpattern(n is int if n > 0) =
    """Compute n! where n is an integer >= 0."""
    range(1, n+1) |> reduce$(*)

# Test cases:
# -1 |> factorial_addpattern |> print  # MatchError
# 0.5 |> factorial_addpattern |> print  # MatchError
# 0 |> factorial_addpattern |> print  # 1
3 |> factorial_addpattern |> print

# Test cases:
# -1 |> factorial_iterative |> print  # TypeError
# 0.5 |> factorial_iterative |> print  # TypeError
# 0 |> factorial_iterative |> print  # 1
3 |> factorial_iterative |> print  # 6

# Test cases:
# -1 |> factorial_imperative |> print  # TypeError
# 0.5 |> factorial_imperative |> print  # TypeError
# 0 |> factorial_imperative |> print  # 1
# 3 |> factorial_imperative |> print  # 6

# Test cases:
#
# -1 |> factorial_recursive |> print  # TypeError
# 0.5 |> factorial_recursive |> print  # TypeError
# 0 |> factorial_recursive |> print  # 1
3 |> factorial_recursive |> print  # 6
#
