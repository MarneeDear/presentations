
# PARTIAL APPLICATION
expnums = range(5) |> map$(pow$(?, 2))
type(expnums) |> print
# pass the list of numbers generated by range(5)
# into map where the map function is each item in the list squared

"OUTPUT OF PARTIAL APPLICATION" |> print
expnums |> list |> print
# take exnums and pass it into the list function and then take the result and print it
# we should see a list of numbers

# PIPEING OR PIPELINING
# like bash you can connect functions together
# passing the output of one into the input of another
# with coconut this looks really slick because you dont have to nest things

def sq(x) = x**2

"OUTPUT OF PIPELINE" |> print
(1, 2) |*> (+) |> sq |> print
# take the tuple (1,2) and pass both vlues into the addition function
# take the output of the addition and pass it into the square function
# then print that

# LAMBDAS
dubsums = map((x, y) -> 2*(x+y), range(0, 10), range(10, 20))
# the map function is a function of x and y ( 2 times x plus y)
# the vlaues of x are 0 to 10
# the values of y are 10 to 20
"OUTPUT OF LAMBDA" |> print
dubsums |> list |> print

#PATTERN MATCHING
# Like a switch statement but better
# MATCH
def factorial(value):
    match 0 in value:
        return 1
    else: match n is int in value if n > 0: # possible because of Coconut's
        return n * factorial(n-1)           #   enhanced else statements
    else:
        raise TypeError("invalid argument to factorial of: "+repr(value))
# MATCH TESTS
"MATCH TESTS" |> print
3 |> factorial |> print

# CASE
def classify_sequence(value):
    out = ""        # unlike with normal matches, only one of the patterns
    case value:     #  will match, and out will only get appended to once
        match ():
            out += "empty"
        match (_,):
            out += "singleton"
        match (x,x):
            out += "duplicate pair of "+str(x)
        match (_,_):
            out += "pair"
        match _ is (tuple, list):
            out += "sequence"
    else:
        raise TypeError()
    return out

# TESTS
"MATCH with CASE TESTS" |> print
[] |> classify_sequence |> print
() |> classify_sequence |> print
[1] |> classify_sequence |> print
(1,1) |> classify_sequence |> print
(1,2) |> classify_sequence |> print
(1,1,1) |> classify_sequence |> print

#FUNCTION COMPOSITION
# not unlike pipeing
# we can smash functions together to make one big function
def f(x) = x + 1
def g(x) = x + 2
fog = f..g
"OUTPUT FUNCTION COMPOSITION" |> print
1 |> fog |> print


# PARALLEL PROGRAMMING
# JULIAN EXPLAINS THIS WITH AN AWESOME EXAMPLE

# ALGEBRAIC DATA TYPES
# I dont understand how these work in Coconut






