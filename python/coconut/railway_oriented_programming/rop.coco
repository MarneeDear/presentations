from collections import namedtuple

ErrorResult = namedtuple("ErrorResult", "Message")

test = ErrorResult(Message = "Somethig went wrong. This could be a message or a an exception object.")

def calc_1(result):
    if isinstance(result, ErrorResult):
        print ("error calc_1")
        return result
    else:
        # do something with the result
        print ("calculating calc_1")        
        return result * 100

def calc_2(result):
    if isinstance(result, ErrorResult):
        print ("error calc_2")
        return result
    else:
        # do something with the result
        print ("calculating calc_2")
        return result * 200

def calc_error(result):
    # FORCE AN ERROR FOR THIS EXAMPLE
    print ("returning an error")
    return test

# calc_1(test) |> print
# calc_2(test) |> print

# calc_error(1) |> print

#NOW we can build a pipeline and short circuit any processing if an error occured

#this chouls produce the error result
1 |> calc_1 |> calc_error |> calc_2 |> print
# pipe 1 into calc_1
# calc_error will result in an ErrorResult
# calc_2 will not do any calculation, but will return the ErrorResult from the previous calculation
# print

